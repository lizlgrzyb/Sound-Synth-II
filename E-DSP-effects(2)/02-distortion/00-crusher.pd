#N canvas 163 317 790 421 10;
#X floatatom 164 168 5 1 32 1 bit-depth - -, f 5;
#X obj 91 277 output~;
#X msg 91 39 open ../../audio/voice.wav \, start;
#X obj 91 90 readsf~;
#X msg 101 59 stop;
#N canvas 350 133 752 516 crusher 0;
#X obj 52 50 inlet~;
#X obj 52 481 outlet~;
#X obj 52 274 *~;
#X obj 52 398 /~;
#X obj 270 186 pow;
#X msg 270 158 2;
#X obj 270 135 t b f;
#X obj 270 63 inlet;
#X obj 52 100 clip~ -1 1;
#X obj 52 123 +~ 1;
#N canvas 146 38 670 523 round 0;
#X obj 48 29 inlet~;
#X obj 48 425 outlet~;
#X obj 88 128 wrap~;
#X obj 48 169 -~;
#X obj 48 357 +~;
#X obj 131 253 -~ 0.5;
#X obj 131 304 clip~ 0 1;
#X obj 131 279 *~ 65536;
#X text 85 357 << So in the end \, we optionally add 1 in order to
round up if the fractional part of the sample is greater than 0.5.
The final output has rounded all samples to the nearest N-bit integer
\, but in 16-bit resolution;
#X text 200 251 << Here we see how far the sample value's fractional
portion is offset from 0.5 \, and scale to 16-bit range. So \, -32768
to +32767 is possible \, with gaps that depend on the chosen bit depth
N.;
#X text 200 304 << This outputs 0 if the offset is negative \, and
1 if positive. In other words \, 1 if the fractional part of the sample
value is greater than 0.5 \, and 0 otherwise.;
#X text 167 55 This is a routine for rounding the N-bit resolution
samples to the nearest integer.;
#X text 129 168 << In effect \, this applies floor() to all samples
\, rounding down to the nearest integer. We could actually stop here
and it would work pretty well \, but if we want to do round() instead
of floor() \, the rest is necessary., f 68;
#X connect 0 0 2 0;
#X connect 0 0 3 0;
#X connect 2 0 3 1;
#X connect 2 0 5 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X connect 5 0 7 0;
#X connect 6 0 4 1;
#X connect 7 0 6 0;
#X restore 52 346 pd round;
#X text 306 190 calculate how many amplitude gradations there are for
the desired bit depth.;
#X text 127 347 << a rounding subpatch to round to the nearest integer
and drop all fractional values in signal;
#X text 140 275 re-range the signal to be from zero to 2^bitdepth.
This will be a large range signal \, but still have fractional values
\, not integers only.;
#X floatatom 290 227 10 0 0 0 - - -, f 10;
#X text 96 120 clip the signal to normal audio range and add a DC offset
of 1 then divide by 2 to get the signal in a normalized 0-1 range for
processing., f 14;
#X text 126 399 divide back to 0-1 normalized range to get floating-point
values \, then subtract 0.5 and multiply by 2 to remove DC offset and
get to normal -1 to +1 audio range.;
#X obj 52 433 -~ 0.5;
#X obj 52 454 *~ 2;
#X obj 52 144 *~ 0.5;
#X obj 368 35 loadbang;
#X obj 270 97 clip 1 32;
#X text 352 96 << allow between 1-32 bits;
#X msg 368 56 32;
#X connect 0 0 8 0;
#X connect 2 0 10 0;
#X connect 3 0 17 0;
#X connect 4 0 2 1;
#X connect 4 0 3 1;
#X connect 4 0 14 0;
#X connect 5 0 4 0;
#X connect 6 0 5 0;
#X connect 6 1 4 1;
#X connect 7 0 21 0;
#X connect 8 0 9 0;
#X connect 9 0 19 0;
#X connect 10 0 3 0;
#X connect 17 0 18 0;
#X connect 18 0 1 0;
#X connect 19 0 2 0;
#X connect 20 0 23 0;
#X connect 21 0 6 0;
#X connect 23 0 21 0;
#X coords 0 516 1 515 85 40 0;
#X restore 91 216 pd crusher;
#X obj 209 277 waveform-plotter;
#X text 345 39 A bit crusher should take full bit-depth audio (in this
case \, either 32- or 64-bit depending on your Pd version) \, and bash
the sample amplitude values to the resolution of a lower bit depth.
32-bit audio allows for 2^32 possible amplitude values per sample (that's
over 4 billion amplitude gradations). 16-bit audio only offers 2^16
= 65536 amplitude gradations. 4-bit audio offers only 2^4 = 16 amplitude
gradations. The lower the bit depth \, the more quantization error
is added to the signal \, which takes the form of harsh noise. Try
lowering the bit-depth control and watch what happens in the waveform
plot.;
#X text 183 215 << see inside for a detailed explanation;
#X connect 0 0 5 1;
#X connect 2 0 3 0;
#X connect 3 0 5 0;
#X connect 3 1 2 0;
#X connect 4 0 3 0;
#X connect 5 0 1 1;
#X connect 5 0 1 0;
#X connect 5 0 6 0;
